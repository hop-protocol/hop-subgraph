type BonderAdded @entity {
  id: ID!
  newBonder: String!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type BonderRemoved @entity {
  id: ID!
  previousBonder: String!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type ChallengeResolved @entity {
  id: ID!
  transferRootId: Bytes!
  rootHash: Bytes!
  originalAmount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type MultipleWithdrawalsSettled @entity {
  id: ID!
  bonder: String!
  rootHash: Bytes!
  totalBondsSettled: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type Stake @entity {
  id: ID!
  account: String!
  amount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type TransferBondChallenged @entity {
  id: ID!
  transferRootId: Bytes!
  rootHash: Bytes!
  originalAmount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type TransferRootBonded @entity {
  id: ID!
  root: Bytes!
  amount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type TransferRootConfirmed @entity {
  id: ID!
  originChainId: BigInt!
  destinationChainId: BigInt!
  rootHash: Bytes!
  totalAmount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type TransferRootSet @entity {
  id: ID!
  rootHash: Bytes!
  totalAmount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type TransferSentToL2 @entity {
  id: ID!
  destinationChainId: BigInt!
  recipient: String!
  amount: BigInt!
  amountOutMin: BigInt!
  deadline: BigInt!
  relayer: String!
  relayerFee: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!
  logIndex: BigInt!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type Unstake @entity {
  id: ID!
  account: String!
  amount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type WithdrawalBondSettled @entity {
  id: ID!
  bonder: String!
  transferId: Bytes!
  rootHash: Bytes!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type WithdrawalBonded @entity {
  id: ID!
  transferId: Bytes!
  amount: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type Withdrew @entity {
  id: ID!
  transferId: Bytes!
  recipient: String!
  amount: BigInt!
  transferNonce: Bytes!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  from: String!
  token: String!
}

type Transfer @entity {
  id: ID!
  from: String!
  to: String!
  value: BigInt!

  block: Block!
  transaction: Transaction!
  tokenEntity: Token!

  # legacy
  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Tvl @entity {
  id: ID!
  amount: BigInt!
  token: String!
}

type Volume @entity {
  id: ID!
  amount: BigInt!

  tokenEntity: Token!

  # legacy
  token: String!
}

type DailyVolume @entity {
  id: ID!
  amount: BigInt!
  date: Int!

  tokenEntity: Token!

  # legacy
  token: String!
}

type Block @entity {
  "Block hash"
  id: ID!

  "Block author"
  author: Bytes!

  "Block difficulty"
  difficulty: BigInt!

  "Block gas limit"
  gasLimit: BigInt!

  "Block gas used"
  gasUsed: BigInt!

  "Block hash"
  hash: Bytes!

  "Block number"
  number: BigInt!

  "Block parent hash"
  parentHash: Bytes!

  "Block receipts root"
  receiptsRoot: Bytes!

  "Block size"
  size: BigInt

  "Block state root"
  stateRoot: Bytes!

  "Block timestamp"
  timestamp: BigInt!

  "Block total difficulty"
  totalDifficulty: BigInt!

  "Block transactions root"
  transactionsRoot: Bytes!

  "Block uncles hash"
  unclesHash: Bytes!
}

type Transaction @entity {
  "Transaction hash"
  id: ID!

  "Transaction from address"
  from: Bytes!

  "Transaction gas limit"
  gasLimit: BigInt!

  "Transaction gas price"
  gasPrice: BigInt!

  "Transaction hash"
  hash: Bytes!

  "Transaction index"
  index: BigInt!

  # NOTE: disabled because it'll go over index limit
  # https://github.com/graphprotocol/graph-node/issues/1133
  # "Transaction input"
  # input: Bytes!

  "Transaction to address"
  to: Bytes

  "Transaction value"
  value: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!

  "Token address"
  address: Bytes!

  "Token decimals"
  decimals: Int!

  "Token name"
  name: String!

  "Token symbol"
  symbol: String!
}
